from telebot import types
from datetime import datetime
from data.data import cold_water_meters, hot_water_meters, electricity_meters, months


def get_month():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    :return: –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, —Ç–µ–∫—Ü—â–∏–π –≥–æ–¥
    """
    now = datetime.now()
    return months[now.month], now.year


def create_meters_markup(user):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–≤–æ–¥–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
    :param user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–æ–±—ä–µ–∫—Ç)
    :return: markup —Å –∫–æ–Ω–ø–∫–∞–º–∏
    """
    markup = types.InlineKeyboardMarkup()
    counter = 1

    # –•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞
    for i in range(user.water_count):
        text = cold_water_meters[user.water_count][i]
        if f'c{counter}' in user.metrics:
            text += " ‚úÖ"
        markup.add(types.InlineKeyboardButton(text, callback_data=f'meter_{counter}'))
        counter += 1

    # –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞ (—Å—Ç–æ–ª—å–∫–æ –∂–µ —Å—á–µ—Ç—á–∏–∫–æ–≤, —Å–∫–æ–ª—å–∫–æ –∏ —Ö–æ–ª–æ–¥–Ω–æ–π)
    for i in range(user.water_count):
        text = hot_water_meters[user.water_count][i]
        if f'c{counter}' in user.metrics:
            text += " ‚úÖ"
        markup.add(types.InlineKeyboardButton(text, callback_data=f'meter_{counter}'))
        counter += 1

    # –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ
    elec_meters = electricity_meters[user.electricity_type]
    for meter in elec_meters:
        if f'c{counter}' in user.metrics:
            meter += " ‚úÖ"
        markup.add(types.InlineKeyboardButton(meter, callback_data=f'meter_{counter}'))
        counter += 1

    if user.all_metrics_entered():
        markup.add(types.InlineKeyboardButton("üì§ –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ", callback_data='review'))
    markup.add(types.InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data='cancel'))
    return markup


def create_review_markup(user):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–≤–æ–¥–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    :param user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–æ–±—ä–µ–∫—Ç)
    :return: markup –∏–∑ –∫–Ω–æ–ø–æ–∫
    """
    markup = types.InlineKeyboardMarkup()
    counter = 1

    # –•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞
    for i in range(user.water_count):
        text = f"{cold_water_meters[user.water_count][i]}: {user.metrics.get(f'c{counter}', '‚Äî')}"
        markup.add(types.InlineKeyboardButton(text, callback_data=f'edit_{counter}'))
        counter += 1

    # –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞
    for i in range(user.water_count):
        text = f"{hot_water_meters[user.water_count][i]}: {user.metrics.get(f'c{counter}', '‚Äî')}"
        markup.add(types.InlineKeyboardButton(text, callback_data=f'edit_{counter}'))
        counter += 1

    # –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ
    elec_meters = electricity_meters[user.electricity_type]
    for i in range(len(elec_meters)):
        text = f"{elec_meters[i]}: {user.metrics.get(f'c{counter}', '‚Äî')}"
        markup.add(types.InlineKeyboardButton(text, callback_data=f'edit_{counter}'))
        counter += 1

    markup.row(
        types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Å–µ", callback_data='confirm_all'),
        types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data='back_edit')
    )
    return markup