from telebot import TeleBot, types
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime
import threading
import time
import shutil
import os

from config import *
from data.models import User, Appeal
from services.utils import *
from data.data import *
from services.exel_export import send_table
from data.database import *
from services.logger import logger

bot = TeleBot(BOT_TOKEN)
now = datetime.now()


@bot.message_handler(commands=['start'])  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def start(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start -> –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞. –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ö–æ–º–∞–Ω–¥–∞ /start
    :return: None
    """

    tablename = 'users'
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = find_user_by_id(tablename, user_id)
    if user:
        apartment = user[2]
        bot.send_message(message.chat.id, f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment}")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register'))
        bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:", reply_markup=markup)
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞')


@bot.callback_query_handler(func=lambda call: call.data == 'register')
def add_apartment_number(call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" -> –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    :param call: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞
    :return: None
    """

    # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã (1‚Äì150):")
    bot.register_next_step_handler(msg, register_apartment)


def register_apartment(message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ë–î -> –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –∫–æ–ª–∏—Å–µ—Å—Ç–≤–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ, –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :return: None
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    try:
        apartment = int(message.text.strip())
        if not 1 <= apartment <= 150:
            raise ValueError
    except:
        msg = bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 150")
        bot.register_next_step_handler(msg, add_apartment_number)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ë–î
    tablename = 'users'
    users = select_all(tablename)
    user_id = message.from_user.id
    if any(u[2] == apartment for u in users):
        bot.send_message(message.chat.id, "‚ùå –ö–≤–∞—Ä—Ç–∏—Ä–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        return

    # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤–æ–¥—ã
    user_data[user_id] = {'apartment': apartment}
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã (–æ—Ç 1 –¥–æ 3):")
    bot.register_next_step_handler(msg, check_water_meters)


def check_water_meters(message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤–æ–¥—ã
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —ç–ª–µ–∫—Ç—Ä–æ—á—Å–µ—Ç—á–∏–∫–∞
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
    try:
        water_meters = int(message.text.strip())
        if not 1 <= water_meters <= 3:
            raise ValueError
    except:
        msg = bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3")
        bot.register_next_step_handler(msg, check_water_meters)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
    user_id = message.from_user.id
    apartment = user_data[user_id]['apartment']
    user_data[user_id] = {
        'water_count': water_meters,
        'apartment': apartment
    }

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('–û–¥–Ω–æ—Ç–∞—Ä–∏—Ñ–Ω—ã–π', callback_data=f'elec_1_{water_meters}_{apartment}'),
        types.InlineKeyboardButton('–î–≤—É—Ö—Ç–∞—Ä–∏—Ñ–Ω—ã–π', callback_data=f'elec_2_{water_meters}_{apartment}')
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—á–µ—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('elec_'))
def select_meters(call):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å—â–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    :param call: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞
    :return: None
    """
    parts = call.data.split('_')
    elec_type = parts[1]  # 1 –∏–ª–∏ 2
    water_count = parts[2]
    user_id = call.from_user.id
    tablename = 'users'

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    apartment = user_data[user_id]['apartment']

    # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ –≤ –ë–î
    insert_to_database(tablename,
                       ['telegram_id', 'apartment', 'water_count', 'electricity_count'],
                       [user_id, int(apartment), int(water_count), int(elec_type)])

    del user_data[user_id]
    logger.info(f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}. –ö–≤–∞—Ä—Ç–∏—Ä–∞ {apartment}')
    bot.send_message(call.message.chat.id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å: /account")
    ADMIN_ID = find_staff_id('–ê–¥–º–∏–Ω')
    bot.send_message(ADMIN_ID,
                     f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –∫–≤. {apartment}, \n"
                     f"—Å—á–µ—Ç—á–∏–∫–æ–≤ –≤–æ–¥—ã: {water_count}, \n"
                     f"—Ç–∏–ø —Å—á–µ—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞: {'–¥–≤—É—Ö—Ç–∞—Ä–∏—Ñ–Ω—ã–π' if elec_type == '2' else '–æ–¥–Ω–æ—Ç–∞—Ä–∏—Ñ–Ω—ã–π'}")


@bot.message_handler(commands=['export'])
def export_data(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /export -> –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–æ–º–∞–Ω–¥–∞ -> /export
    :return: None
    """
    ACCOUNTANT_ID = find_staff_id('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä')
    if message.chat.id != ACCOUNTANT_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    else:
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–ª—å {message.chat.id} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª Exel-—Ç–∞–±–ª–∏—Ü—É')
        send_table(message.chat.id)

@bot.message_handler(commands=['backup'])
def backup(message):
    admin = find_staff_id('–ê–¥–º–∏–Ω')
    if message.from_user.id != admin:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    else:
        backup_daily()
        backup_monthly()

@bot.message_handler(commands=['info'])
def info(message):
    """
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å—â–æ–≤–∞—Ç–µ–ª—é –∫–æ–º–∞–Ω–¥–∞—Ö
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–æ–º–∞–Ω–¥–∞ /info
    :return: None
    """
    result = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º –∫–æ–º–∞–Ω–¥: \n"
    user_status = 'user'
    result += '''
    /send - –ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ \n
    /manager - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é \n
    /accountant - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É \n
    /electric - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É —ç–ª–µ–∫—Ç—Ä–∏–∫–∞ \n
    /plumber - –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ \n
    /account - –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∫–≤–∞—Ä—Ç–∏—Ä—ã \n
    '''
    staff_id = [
        find_staff_id('–ê–¥–º–∏–Ω'),
        find_staff_id('–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å'),
        find_staff_id('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä')
    ]
    for id in staff_id:
        if message.from_user.id == id:
            user_status = 'staff'

    if user_status == 'staff':
        result += "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–∫–µ –≤–∞–º \n"
        if message.from_user.id == staff_id[0]:
            result += "/backup - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö \n"
        if message.from_user.id == staff_id[1]:
            pass
        if message.from_user.id == staff_id[2]:
            result += '/export - –ü–æ–ª—É—á–∏—Ç—å Exel-—Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤ \n'

    bot.send_message(message.chat.id, result)


@bot.message_handler(commands=['account'])
def account(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /account -> –í—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫–∞—É–Ω—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª—è - –∫–æ–º–∞–Ω–¥–∞ /account
    :return: None
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_id = message.from_user.id
    user_exists = find_user_by_id('users', telegram_id, 'COUNT(*)')[0] > 0
    if not user_exists:
        bot.send_message(
            message.chat.id,
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
        )
        return

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    result = find_user_by_id('users', telegram_id, 'apartment, water_count, electricity_count')
    if result:
        apartment, water_count, electricity_type = result
        rate = "–û–¥–Ω–æ—Ç–∞—Ä–∏—Ñ–Ω—ã–π" if electricity_type == "one_rate" else "–î–≤—É—Ö—Ç–∞—Ä–∏—Ñ–Ω—ã–π"
        bot.send_message(
            message.chat.id,
            f"üè† –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment}\n"
            f"–°—á—ë—Ç—á–∏–∫–æ–≤ –≤–æ–¥—ã: {water_count}\n"
            f"–°—á–µ—Ç—á–∏–∫ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞: {rate}"
        )
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å')
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"
        )


@bot.message_handler(commands=['auth'])
def auth(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /aunh -> –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–æ–º–∞–Ω–¥–∞ /auth
    :return: None
    """
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    bot.register_next_step_handler(msg, enter_auth_code)


def enter_auth_code(message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ -> –∞—Ç–≤–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É—É–¥–Ω–∏–∫–∞
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏—Ü–∞—Ü–∏–∏
    :return: None
    """
    user_id = message.from_user.id
    user_name = f'{message.from_user.first_name or ""} {message.from_user.last_name or ""}'
    auth_code = message.text.strip()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –ë–î
    staff_list = select_all('staff')
    for post in staff_list:
        staff_post = post[1]
        code = post[4]
        if auth_code == code:
            update_values('staff',
                          {'telegram_id': user_id, 'name': user_name},
                          {'auth_code': auth_code}
                          )
            bot.send_message(message.chat.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {staff_post}')
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ—å {message.chat.id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {staff_post}')
            bot.send_message(find_staff_id('–ê–¥–º–∏–Ω'),
                             f"‚ö†Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: {message.from_user.first_name} {message.from_user.last_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {staff_post}")
            return
        else:
            continue
    else:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        bot.register_next_step_handler(msg, enter_auth_code)


@bot.message_handler(commands=['send'])
def send_data(message):
    """
    –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–æ–º–∞–Ω–¥–∞ /send
    :return: None
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if not (start_collection[0] <= now.day <= end_collection[0] and
            not (now.day == end_collection[0] and
                 (now.hour > end_collection[1] or
                  (now.hour == end_collection[1] and now.minute > end_collection[2])))):
        bot.send_message(message.chat.id,
                         "‚ùå –ü—Ä–∏–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏–π –∑–∞–∫—Ä—ã—Ç. –ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å 23 –ø–æ 27 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
    telegram_id = message.from_user.id
    user = find_user_by_id('meters_data', telegram_id)
    if user:
        bot.send_message(message.chat.id, '‚úÖ –í—ã —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ')
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if telegram_id in temp_users:
        user = temp_users[telegram_id]
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        user_data = find_user_by_id('users', telegram_id, 'apartment, water_count, electricity_count')
        if not user_data:
            bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
            return

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        apartment, water_count, electricity_count = user_data
        user = User(telegram_id, apartment, water_count, electricity_count)
        temp_users[telegram_id] = user

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–≤–±–æ—Ä–∞ —Å—á–µ—Ç—á–∏–∫–∞
    month, year = get_month()
    markup = create_meters_markup(user)
    bot.send_message(message.chat.id, f"üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è –∑–∞ {month} {year}", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('meter_'))
def meter_input(call):
    """
    –í–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
    :param call: –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
    :return: None
    """
    # –í–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
    meter = call.data.split('_')[1]
    current_editing[call.from_user.id] = meter
    msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞:")
    bot.register_next_step_handler(msg, process_value)


def process_value(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    :return: None
    """
    telegram_id = message.from_user.id
    user = temp_users.get(telegram_id)
    meter = current_editing.get(telegram_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
    if not user or not meter:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Å—á—ë—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
    try:
        value = int(message.text.strip())
        if value < 0:
            raise ValueError
    except:
        msg = bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(msg, process_value)
        return

    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    user.add_metric(meter, value)
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    month, year = get_month()
    markup = create_meters_markup(user)
    bot.send_message(message.chat.id, f"üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è –∑–∞ {month} {year}", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'review')
def review(call):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    :param call: –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    :return: None
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = temp_users.get(call.from_user.id)
    if not user:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    markup = create_review_markup(user)
    month, year = get_month()
    bot.send_message(call.message.chat.id, f"üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ {month} {year}", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_'))
def edit_value(call):
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    :param call: –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    :return: None
    """
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
    meter = call.data.split('_')[1]
    current_editing[call.from_user.id] = meter
    msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞")
    bot.register_next_step_handler(msg, process_value)


@bot.callback_query_handler(func=lambda call: call.data == 'confirm_all')
def confirm_all(call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π. –ó–∞–ø–∏—Å—å –≤ –ë–î
    :param call: –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    :return: None
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = temp_users.get(call.from_user.id)
    if not user:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    report = user.get_report()

    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
    cold_list = cold_water_meters[user.water_count]
    hot_list = hot_water_meters[user.water_count]
    elec_list = electricity_meters[user.electricity_type]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è –∏–∑ current_meters
    data = current_meters.get(user.telegram_id, {})
    # –•–í–°
    cw1 = int(data.get(cold_list[0], 0)) if len(cold_list) > 0 else 0
    cw2 = int(data.get(cold_list[1], 0)) if len(cold_list) > 1 else 0
    cw3 = int(data.get(cold_list[2], 0)) if len(cold_list) > 2 else 0

    # –ì–í–°
    hw1 = int(data.get(hot_list[0], 0)) if len(hot_list) > 0 else 0
    hw2 = int(data.get(hot_list[1], 0)) if len(hot_list) > 1 else 0
    hw3 = int(data.get(hot_list[2], 0)) if len(hot_list) > 2 else 0

    # –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ
    el1 = int(data.get(elec_list[0], 0)) if len(elec_list) > 0 else 0
    el2 = int(data.get(elec_list[1], 0)) if len(elec_list) > 1 else 0

    month = now.strftime('%m.%Y')

    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    columns = [
        'telegram_id', 'apartment', 'month',
        'type_water_meter', 'type_electricity_meter',
        'cold_water_1', 'cold_water_2', 'cold_water_3',
        'hot_water_1', 'hot_water_2', 'hot_water_3',
        'electricity_1', 'electricity_2'
    ]
    values = [
        user.telegram_id,
        user.apartment,
        month,
        user.water_count,
        user.electricity_type,
        cw1, cw2, cw3,
        hw1, hw2, hw3,
        el1, el2
    ]
    insert_to_database('meters_data', columns, values)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
    ACCOUNTANT_ID = find_staff_id('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä')
    bot.send_message(ACCOUNTANT_ID, f"üì® –ü–æ–∫–∞–∑–∞–Ω–∏—è –æ—Ç –∫–≤. {user.apartment}:\n{report}")
    user.clear_metrics()
    temp_users.pop(call.from_user.id, None)
    bot.send_message(call.message.chat.id, "‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    logger.info(f'–ü–æ–∫–∞–∑–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω—ã. –ö–≤–∞—Ä—Ç–∏—Ä–∞ {user.apartment}')


@bot.callback_query_handler(func=lambda call: call.data == 'back_edit')
def back_edit(call):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    :param call: –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    :return: None
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = temp_users.get(call.from_user.id)
    if not user:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = create_meters_markup(user)
    month, year = get_month()
    bot.send_message(call.message.chat.id, f"üìä –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞ {month} {year}", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def cancel(call):
    """
    –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
    :param call: –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
    :return: None
    """
    # –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞
    user = temp_users.get(call.from_user.id)
    if user:
        user.clear_metrics()
        temp_users.pop(call.from_user.id, None)

    bot.send_message(call.message.chat.id, "üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω")


@bot.message_handler(commands=['manager', 'accountant', 'electric', 'plumber'])
def handle_address_request(message):
    """
    –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è / –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å—â–æ–≤–∞—Ç–µ–ª—è - –∫–æ–º–∞–Ω–¥–∞, —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é –æ–±—Ä–∞—â–µ–Ω–∏—è
    :return: None
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    command = message.text.split('@')[0]
    MANAGER_ID = find_staff_id('–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å')
    ACCOUNTANT_ID = find_staff_id('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä')
    PLUMBER_ID = find_staff_id('–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫')
    ELECTRIC_ID = find_staff_id('–≠–ª–µ–∫—Ç—Ä–∏–∫')
    recipient_data = {
        '/manager': {
            'id': MANAGER_ID,
            'request_text': "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é –¢–°–ñ",
            'recipient': "–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å",
            'message_type': '–û–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é',
            'response_success': "‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é"
        },
        '/accountant': {
            'id': ACCOUNTANT_ID,
            'request_text': "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É",
            'recipient': "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä",
            'message_type': '–û–±—Ä–∞—â–µ–Ω–∏–µ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É',
            'response_success': "‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É"
        },
        '/electric': {
            'id': ELECTRIC_ID,
            'request_text': "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É —ç–ª–µ–∫—Ç—Ä–∏–∫–∞",
            'recipient': "–≠–ª–µ–∫—Ç—Ä–∏–∫",
            'message_type': '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–ª–µ–∫—Ç—Ä–∏–∫–∞',
            'response_success': "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —ç–ª–µ–∫—Ç—Ä–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
        },
        '/plumber': {
            'id': PLUMBER_ID,
            'request_text': "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞",
            'recipient': "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫",
            'message_type': '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞',
            'response_success': "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
        }
    }

    msg = bot.send_message(message.chat.id, recipient_data[command]['request_text'])
    bot.register_next_step_handler(msg, lambda m: send_address(m, recipient_data[command]))


def send_address(message, recipient_info):
    """
    –ó–∞–ø–∏—Å—å –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ë–î, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è
    :param recipient_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
    :return: None
    """
    text = message.text.strip() if message.text else ""
    sender_id = message.from_user.id
    sender_name = message.from_user.first_name or ""
    sender_surname = message.from_user.last_name or ""

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    result = find_user_by_id("users", sender_id, "apartment")
    apartment = result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

    ap = Appeal(
        sender_id=message.from_user.id,
        apartment=apartment,
        message_text=text,
        recirient_post=recipient_info['recipient']
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    insert_to_database('appeals',
                       ['sender_id', 'apartment', 'message_text', 'recipient_post'],
                       [ap.sender_id, ap.apartment, ap.message_text, ap.recipient_post]
                       )

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        "–û—Ç–≤–µ—Ç–∏—Ç—å",
        callback_data=f"reply_{sender_id}_{message.message_id}"
    ))

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(
        recipient_info['id'],
        f'üì® –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –∂–∏—Ç–µ–ª—è:\n'
        f'üë§ [{sender_name} {sender_surname}](tg://user?id={sender_id})\n'
        f'üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment}\n\n'
        f'_{text}_',
        parse_mode="Markdown",
        reply_markup=markup
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è{sender_id}. –ü–æ–ª—É—á–∞—Ç–µ–ª—å {recipient_info['recipient']}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, recipient_info['response_success'])

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    logger.info(f'{recipient_info["message_type"]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ö–≤. {apartment}, ID {sender_id}')


@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def start_staff_reply(call):
    """
    –ó–∞–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    :param call: –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    :return: None
    """
    _, user_id, message_id = call.data.split('_')
    active_dialogs[call.from_user.id] = (int(user_id), int(message_id))

    bot.send_message(
        call.from_user.id,
        "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
        reply_markup=types.ForceReply(selective=True)
    )


@bot.message_handler(func=lambda m: m.reply_to_message and m.reply_to_message.text == "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
def process_staff_reply(message):
    """
    –ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    :return: None
    """
    staff_id = message.from_user.id
    if staff_id not in active_dialogs:
        return

    MANAGER_ID = find_staff_id('–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å')
    ACCOUNTANT_ID = find_staff_id('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä')
    PLUMBER_ID = find_staff_id('–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫')
    ELECTRIC_ID = find_staff_id('–≠–ª–µ–∫—Ç—Ä–∏–∫')

    user_id, original_message_id = active_dialogs[staff_id]
    if staff_id == MANAGER_ID:
        staff_position = "–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –¢–°–ñ"
    elif staff_id == ACCOUNTANT_ID:
        staff_position = "–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞"
    elif staff_id == ELECTRIC_ID:
        staff_position = "—ç–ª–µ–∫—Ç—Ä–∏–∫–∞"
    elif staff_id == PLUMBER_ID:
        staff_position = "—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞"
    else:
        staff_position = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(user_id, f"üì© –û—Ç–≤–µ—Ç {staff_position} –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n\n{message.text}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
    update_values('appeals',
                  {'status': 'closed', 'answer_text': message.text},
                  {'sender_id': user_id, 'status': 'open'}
                  )
    logger.info(f'–û—Ç–≤–µ—Ç {staff_position} –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ')
    bot.send_message(staff_id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    del active_dialogs[staff_id]


def notifications():
    """
    –û—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–±–æ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π (–¥–ª—è –≤—Å–µ—Ö)
    2. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π (–¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –µ—â–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª)
    3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–±–æ—Ä–∞ (–¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª)
        3.1. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É
    :return: None
    """
    scheulder = BackgroundScheduler()
    scheulder.add_job(backup_daily, 'cron', hour=2, minute=0)

    while True:
        now = datetime.now()
        current_month = f"{now.month}.{now.year}"

        # –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
        if now.day == start_collection[0] and now.hour == start_collection[1] and now.minute == start_collection[2]:
            users = select_all('users')
            logger.info("–û—Ç–∫—Ä—ã—Ç —Å–±–æ—Ä –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤")
            if not scheulder.running:
                scheulder.start()
            for user in users:
                bot.send_message(user[1], "üì¨ –û—Ç–∫—Ä—ã—Ç —Å–±–æ—Ä –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤")

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ
        if now.day == notification_time[0] and now.hour == notification_time[1] and now.minute == notification_time[2]:
            users = select_all('users')
            sended_data = select_all('meters_data')
            apartments = []
            for data in sended_data:
                apartments.append(data[2])
            for user in users:
                users_apartment = user[2]
                user_id = user[1]
                if users_apartment not in apartments:
                    bot.send_message(user_id, "‚è∞ –ü–æ—Ä–∞ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤! /send")
                    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞
        if now.day == end_collection[0] and now.hour == end_collection[1] and now.minute == end_collection[2]:
            users = select_all('users')
            sended_data = select_all('meters_data')
            apartments = []
            for data in sended_data:
                apartments.append(data[2])
            for user in users:
                users_apartment = user[2]
                user_id = user[1]
                if users_apartment not in apartments:
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–±–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
                    bot.send_message(user_id, "üî¥ –ü—Ä–∏–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏–π –∑–∞–∫—Ä—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞")

            ACCOUNTANT_ID = find_staff_id('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä')
            send_table(ACCOUNTANT_ID)
            logger.info('–¢–∞–±–ª–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–≤–ª–µ–Ω–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É')
            if scheulder.running:
                scheulder.shutdown()
            clear_table('meters_data')
            backup_monthly()
            logger.warning('–¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π –æ—á–∏—â–µ–Ω–∞')

        time.sleep(60)


def init_db():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    :return: None
    """
    create_table('users', [
        "telegram_id INTEGER UNIQUE",
        "apartment INTEGER",
        "water_count INTEGER",
        "electricity_count INTEGER"
    ])
    create_table('meters_data', [
        "telegram_id INTEGER",
        "apartment INTEGER",
        "month VARCHAR",
        "type_water_meter INTEGER",
        "type_electricity_meter INTEGER",
        "cold_water_1 INTEGER",
        "cold_water_2 INTEGER",
        "cold_water_3 INTEGER",
        "hot_water_1 INTEGER",
        "hot_water_2 INTEGER",
        "hot_water_3 INTEGER",
        "electricity_1 INTEGER",
        "electricity_2 INTEGER"
    ])
    create_table('appeals', [
        'sender_id INTEGER',
        'apartment INTEGER',
        'message_text TEXT',
        'recipient_post TEXT',
        'answer_text TEXT',
        "status TEXT DEFAULT 'open'",
    ])
    create_table('staff', [
        'post TEXT',
        'telegram_id INTEGER',
        'name TEXT',
        'auth_code TEXT'
    ])


def init_staff():
    """
    –ó–∞–ø–æ–ª–µ–Ω–∏–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    :return: None
    """
    tablename = 'staff'
    table = select_all(tablename)
    if table:
        return
    columns = ['post', 'auth_code']
    insert_to_database(tablename, columns, ['–ê–¥–º–∏–Ω', ADMIN_CODE])
    insert_to_database(tablename, columns, ['–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å', MANAGER_CODE])
    insert_to_database(tablename, columns, ['–ë—É—Ö–≥–∞–ª—Ç–µ—Ä', ACCOUNTANT_CODE])
    insert_to_database(tablename, columns, ['–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫', PLUMBER_CODE])
    insert_to_database(tablename, columns, ['–≠–ª–µ–∫—Ç—Ä–∏–∫', ELECTRIC_CODE])


def backup_daily(db_path="tsg_database.sql", backup_dir="backups/daily"):
    """
    –°–æ–∑–¥–∞—ë—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –°—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø —É–¥–∞–ª—è–µ—Ç—Å—è, —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π.
    """
    os.makedirs(backup_dir, exist_ok=True)
    backup_path = os.path.join(backup_dir, "backup_daily.sql")

    # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø, –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists(backup_path):
        os.remove(backup_path)

    shutil.copy2(db_path, backup_path)
    logger.info(f"[‚úì] –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
    bot.send_message(find_staff_id('–ê–¥–º–∏–Ω'), "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ (–¥–µ–Ω—å)")


def backup_monthly(db_path="tsg_database.sql", backup_dir="backups/monthly"):
    """
    –°–æ–∑–¥–∞—ë—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –•—Ä–∞–Ω–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è.
    """
    os.makedirs(backup_dir, exist_ok=True)
    month_str = datetime.now().strftime("%Y-%m")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π datetime
    backup_path = os.path.join(backup_dir, f"backup_{month_str}.sql")

    if not os.path.exists(backup_path):
        shutil.copy2(db_path, backup_path)
        logger.info(f"[‚úì] –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        bot.send_message(find_staff_id('–ê–¥–º–∏–Ω'), "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ (–º–µ—Å—è—Ü)")
    else:
        logger.info(f"[!] –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∫–æ–ø–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {backup_path}")
        bot.send_message(find_staff_id('–ê–¥–º–∏–Ω'), "–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∫–æ–ø–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    init_db()
    init_staff()
    now = datetime.now()
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    threading.Thread(target=notifications, daemon=True).start()
    bot.polling(none_stop=True)
