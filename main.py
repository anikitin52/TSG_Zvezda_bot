import os
import random
import socket
import http.client
import requests
from urllib3.exceptions import ProtocolError
import telebot.apihelper
import shutil
import threading
import time

from apscheduler.schedulers.background import BackgroundScheduler
from telebot import TeleBot

from config import *
from data.data import *
from data.database import *
from data.models import User
from services.exel_export import send_table, send_appeals_table
from services.logger import logger
from services.utils import *

bot = TeleBot(BOT_TOKEN)
now = datetime.now()


@bot.message_handler(commands=['start'])
def start(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start -> –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞. –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ö–æ–º–∞–Ω–¥–∞ /start
    :return: None
    """
    try:
        tablename = 'users'
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = find_user_by_id(tablename, user_id)
        if user:
            apartment = user[3]
            bot.send_message(message.chat.id, f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment}")
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —É –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            msg = bot.send_message(message.chat.id, 'üîí –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞:')
            bot.register_next_step_handler(msg, check_password)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


def check_password(message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    :return: None
    """
    try:
        if message.text.strip() == PASSWORD:
            # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:")
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û")
            bot.register_next_step_handler(msg, check_name)
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')

        elif message.text.strip().lower() == '/cancel':
            bot.send_message(message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return

        else:
            # –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–Ω–æ–≤–∞
            msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(msg, check_password)  # –°–Ω–æ–≤–∞ –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_name: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


def check_name(message):
    try:
        if validate_russian_name(message.text):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            user_id = message.from_user.id
            if user_id not in user_data:
                user_data[user_id] = {}
            user_data[user_id]['name'] = message.text.strip()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è

            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã (–æ—Ç 1 –¥–æ 150)")
            bot.register_next_step_handler(msg, check_apartment_number)

        elif message.text.strip().lower() == '/cancel':
            bot.send_message(message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return

        else:
            msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
            bot.register_next_step_handler(msg, check_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_name: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


def check_apartment_number(message):
    try:
        if message.text.strip().lower() == '/cancel':
            bot.send_message(message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return

        try:
            apartment = int(message.text.strip())
            if not 1 <= apartment <= 150:
                raise ValueError

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –ë–î
            tablename = 'users'
            users = select_all(tablename)
            user_id = message.from_user.id


            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å!)
            user_data[user_id]['apartment'] = apartment

            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã (–æ—Ç 1 –¥–æ 3):")
            bot.register_next_step_handler(msg, check_water_meters)

        except ValueError:
            msg = bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 150")
            bot.register_next_step_handler(msg, check_apartment_number)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_apartment_number: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


def check_water_meters(message):
    try:
        if message.text.strip().lower() == '/cancel':
            bot.send_message(message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        try:
            water_meters = int(message.text.strip())
            if not 1 <= water_meters <= 3:
                raise ValueError

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç—á–∏–∫–æ–≤ (–Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å!)
            user_id = message.from_user.id
            user_data[user_id]['water_count'] = water_meters

            # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton('–û–¥–Ω–æ—Ç–∞—Ä–∏—Ñ–Ω—ã–π',
                                           callback_data=f'elec_1_{water_meters}_{user_data[user_id]["apartment"]}'),
                types.InlineKeyboardButton('–î–≤—É—Ö—Ç–∞—Ä–∏—Ñ–Ω—ã–π',
                                           callback_data=f'elec_2_{water_meters}_{user_data[user_id]["apartment"]}')
            )
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—á–µ—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞", reply_markup=markup)

        except ValueError:
            msg = bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3")
            bot.register_next_step_handler(msg, check_water_meters)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_water_meters: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


@bot.callback_query_handler(func=lambda call: call.data.startswith('elec_'))
def select_meters(call):
    try:
        parts = call.data.split('_')
        elec_type = parts[1]
        water_count = parts[2]
        user_id = call.from_user.id
        tablename = 'users'

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id not in user_data or 'name' not in user_data[user_id]:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.",
                                      show_alert=True)
            return

        apartment = user_data[user_id]['apartment']
        name = user_data[user_id]['name']

        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ –≤ –ë–î
        insert_to_database(tablename,
                           ['telegram_id', 'name', 'apartment', 'water_count', 'electricity_count'],
                           [user_id, name, int(apartment), int(water_count), int(elec_type)])

        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in user_data:
            del user_data[user_id]

        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å: /account")

        ADMIN_ID = find_staff_id('–ê–¥–º–∏–Ω')
        bot.send_message(ADMIN_ID,
                         f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}\n"
                         f"–ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment}\n"
                         f"–°—á–µ—Ç—á–∏–∫–æ–≤ –≤–æ–¥—ã: {water_count}\n"
                         f"–¢–∏–ø —Å—á–µ—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞: {'–¥–≤—É—Ö—Ç–∞—Ä–∏—Ñ–Ω—ã–π' if elec_type == '2' else '–æ–¥–Ω–æ—Ç–∞—Ä–∏—Ñ–Ω—ã–π'}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)


@bot.message_handler(commands=['export'])
def export_data(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /export -> –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–æ–º–∞–Ω–¥–∞ -> /export
    :return: None
    """
    try:
        ACCOUNTANT_ID = find_staff_id('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä')
        if message.chat.id != ACCOUNTANT_ID:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return
        else:
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–ª—å {message.chat.id} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª Exel-—Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏ —Å—á–µ—Ç—á—Ç–∫–æ–≤')
            send_table(message.chat.id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ export_data: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


@bot.message_handler(commands=['appeals'])
def send_appeals(message):
    try:
        MANAGER_ID = find_staff_id('–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å')
        if message.chat.id != MANAGER_ID:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return
        else:
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–ª—å {message.chat.id} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª Exel-—Ç–∞–±–ª–∏—Ü—É —Å –æ–±—Ä–∞—â–µ–Ω–∏—è–º–∏')
            send_appeals_table(message.chat.id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_appeals: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


@bot.message_handler(commands=['backup'])
def backup(message):
    try:
        admin = find_staff_id('–ê–¥–º–∏–Ω')
        if message.from_user.id != admin:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
            return
        else:
            backup_daily()
            backup_monthly()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ backup: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


@bot.message_handler(commands=['info'])
def info(message):
    """
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å—â–æ–≤–∞—Ç–µ–ª—é –∫–æ–º–∞–Ω–¥–∞—Ö
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–æ–º–∞–Ω–¥–∞ /info
    :return: None
    """
    try:
        if find_user_by_id('users', message.from_user.id) is None:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤–≤–µ–¥–∏—Ç–µ /start")
            return

        result = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º –∫–æ–º–∞–Ω–¥: \n"
        user_status = 'user'
        result += '''
        /send - –ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ \n
        /manager - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é \n
        /accountant - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É \n
        /account - –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å –∫–≤–∞—Ä—Ç–∏—Ä—ã \n
        '''
        staff_id = [
            find_staff_id('–ê–¥–º–∏–Ω'),
            find_staff_id('–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å'),
            find_staff_id('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä')
        ]
        for id in staff_id:
            if message.from_user.id == id:
                user_status = 'staff'

        if user_status == 'staff':
            result += "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–∫–µ –≤–∞–º \n"
            if message.from_user.id == staff_id[0]:
                result += "/backup - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö \n"
            if message.from_user.id == staff_id[1]:
                pass
            if message.from_user.id == staff_id[2]:
                result += '/export - –ü–æ–ª—É—á–∏—Ç—å Exel-—Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤ \n'

        bot.send_message(message.chat.id, result)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ info: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


@bot.message_handler(commands=['account'])
def account(message):
    """–í—ã–≤–æ–¥ –ø—Ä–æ—Ñ–∏–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        telegram_id = message.from_user.id
        user_exists = find_user_by_id('users', telegram_id, 'COUNT(*)')[0] > 0

        if not user_exists:
            bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
            return

        result = find_user_by_id('users', telegram_id, 'apartment, water_count, electricity_count, name')

        if result:
            apartment, water_count, electricity_type, name = result
            rate = "–û–¥–Ω–æ—Ç–∞—Ä–∏—Ñ–Ω—ã–π" if electricity_type == 1 else "–î–≤—É—Ö—Ç–∞—Ä–∏—Ñ–Ω—ã–π"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(
                types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", callback_data=f'edit_name_{telegram_id}'),
                types.InlineKeyboardButton("üè† –ò–∑–º–µ–Ω–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É", callback_data=f'edit_apartment_{telegram_id}'),
                types.InlineKeyboardButton("üíß –ò–∑–º–µ–Ω–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ –≤–æ–¥—ã", callback_data=f'edit_water_{telegram_id}'),
                types.InlineKeyboardButton("‚ö° –ò–∑–º–µ–Ω–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—Å—á–µ—Ç—á–∏–∫", callback_data=f'edit_electric_{telegram_id}'),
                types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data=f'delete_account_{telegram_id}')
            )

            bot.send_message(
                message.chat.id,
                f"üè† –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–§–ò–û: {name}\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment}\n"
                f"–°—á—ë—Ç—á–∏–∫–æ–≤ –≤–æ–¥—ã: {water_count}\n"
                f"–°—á–µ—Ç—á–∏–∫ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞: {rate}",
                reply_markup=markup
            )
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ account: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_name_'))
def edit_name(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û"""
    try:
        telegram_id = int(call.data.split('_')[2])
        if call.from_user.id != telegram_id:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return

        bot.answer_callback_query(call.id)
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:")
        bot.register_next_step_handler(msg, process_new_name, telegram_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_name: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        handle_error(e)


def process_new_name(message, telegram_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –§–ò–û"""
    try:
        if validate_russian_name(message.text):
            update_values('users', {'name': message.text.strip()}, {'telegram_id': telegram_id})
            bot.send_message(message.chat.id, "‚úÖ –§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")

        elif message.text.strip().lower() == '/cancel':
            bot.send_message(message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return

        else:
            msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û")
            bot.register_next_step_handler(msg, process_new_name, telegram_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_new_name: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_apartment_'))
def edit_apartment(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã"""
    try:
        telegram_id = int(call.data.split('_')[2])
        if call.from_user.id != telegram_id:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return

        bot.answer_callback_query(call.id)
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã (1-150):")
        bot.register_next_step_handler(msg, process_new_apartment, telegram_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_apartment: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        handle_error(e)


def process_new_apartment(message, telegram_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã"""
    try:
        if message.text.strip().lower() == '/cancel':
            bot.send_message(message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return

        try:
            apartment = int(message.text)
            if 1 <= apartment <= 150:
                update_values('users', {'apartment': apartment}, {'telegram_id': telegram_id})
                bot.send_message(message.chat.id, "‚úÖ –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑–º–µ–Ω–µ–Ω")
            else:
                msg = bot.send_message(message.chat.id, "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 150")
                bot.register_next_step_handler(msg, process_new_apartment, telegram_id)
        except ValueError:
            msg = bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            bot.register_next_step_handler(msg, process_new_apartment, telegram_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_new_apartment: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_water_'))
def edit_water(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤–æ–¥—ã"""
    try:
        telegram_id = int(call.data.split('_')[2])
        if call.from_user.id != telegram_id:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return

        bot.answer_callback_query(call.id)
        msg = bot.send_message(
            call.message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã (1-3):\n"
        )
        bot.register_next_step_handler(msg, process_new_water, telegram_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_water: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        handle_error(e)


def process_new_water(message, telegram_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤–æ–¥—ã"""
    try:
        if message.text.strip().lower() == '/cancel':
            bot.send_message(message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return

        try:
            water_count = int(message.text)
            if 1 <= water_count <= 3:
                update_values('users', {'water_count': water_count}, {'telegram_id': telegram_id})
                bot.send_message(message.chat.id, f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤–æ–¥—ã –∏–∑–º–µ–Ω–µ–Ω–æ")
            else:
                msg = bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3")
                bot.register_next_step_handler(msg, process_new_water, telegram_id)
        except ValueError:
            msg = bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3")
            bot.register_next_step_handler(msg, process_new_water, telegram_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_new_water: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_electric_'))
def edit_electric(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —ç–ª–µ–∫—Ç—Ä–æ—Å—á–µ—Ç—á–∏–∫–∞"""
    try:
        telegram_id = int(call.data.split('_')[2])
        if call.from_user.id != telegram_id:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return

        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton('–û–¥–Ω–æ—Ç–∞—Ä–∏—Ñ–Ω—ã–π', callback_data=f'confirm_elec_1_{telegram_id}'),
            types.InlineKeyboardButton('–î–≤—É—Ö—Ç–∞—Ä–∏—Ñ–Ω—ã–π', callback_data=f'confirm_elec_2_{telegram_id}')
        )

        bot.answer_callback_query(call.id)
        bot.send_message(
            call.message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—á–µ—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞:",
            reply_markup=markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_electric: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        handle_error(e)


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_elec_'))
def confirm_electric(call):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —ç–ª–µ–∫—Ç—Ä–æ—Å—á–µ—Ç—á–∏–∫–∞"""
    try:
        parts = call.data.split('_')
        elec_type = int(parts[2])
        telegram_id = int(parts[3])

        if call.from_user.id != telegram_id:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return

        try:
            update_values('users', {'electricity_count': elec_type}, {'telegram_id': telegram_id})
            bot.answer_callback_query(call.id)
            bot.send_message(
                call.message.chat.id,
                f"‚úÖ –¢–∏–ø —ç–ª–µ–∫—Ç—Ä–æ—Å—á–µ—Ç—á–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {'–æ–¥–Ω–æ—Ç–∞—Ä–∏—Ñ–Ω—ã–π' if elec_type == 1 else '–¥–≤—É—Ö—Ç–∞—Ä–∏—Ñ–Ω—ã–π'}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ—Å—á–µ—Ç—á–∏–∫–∞: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_electric: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        handle_error(e)


@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_account_'))
def delete_account_confirmation(call):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        telegram_id = int(call.data.split('_')[2])
        if call.from_user.id != telegram_id:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'confirm_delete_{telegram_id}'),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f'cancel_delete_{telegram_id}')
        )

        bot.answer_callback_query(call.id)
        bot.send_message(
            call.message.chat.id,
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?\n"
            "–í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã!",
            reply_markup=markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_account_confirmation: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        handle_error(e)


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_'))
def delete_account(call):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        telegram_id = int(call.data.split('_')[2])
        if call.from_user.id != telegram_id:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return

        try:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            delete_from_database('users', {'telegram_id': telegram_id})
            delete_from_database('meters_data', {'telegram_id': telegram_id})
            delete_from_database('appeals', {'sender_id': telegram_id})

            bot.answer_callback_query(call.id, "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω", show_alert=True)
            bot.send_message(
                call.message.chat.id,
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω. –î–ª—è –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ /start"
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {telegram_id}: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤  delete_account: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        handle_error(e)


@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_delete_'))
def cancel_delete(call):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    try:
        telegram_id = int(call.data.split('_')[2])
        bot.answer_callback_query(call.id, "‚ùé –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_delete: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        handle_error(e)


@bot.message_handler(commands=['auth'])
def auth(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /aunh -> –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–æ–º–∞–Ω–¥–∞ /auth
    :return: None
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if find_user_by_id('users', message.from_user.id) is None:
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞")
            bot.register_next_step_handler(msg, add_enter_code)
            return

        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        bot.register_next_step_handler(msg, enter_auth_code)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ auth: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


def add_enter_code(message):
    try:
        code = message.text
        if code == PASSWORD:
            msg = bot.send_message(message.chat.id, "B–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            bot.register_next_step_handler(msg, enter_auth_code)

        elif message.text.strip().lower() == '/cancel':
            bot.send_message(message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return

        else:
            msg = bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(msg, add_enter_code)  # –°–Ω–æ–≤–∞ –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_enter_code: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


def enter_auth_code(message):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ -> –∞—Ç–≤–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É—É–¥–Ω–∏–∫–∞
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏—Ü–∞—Ü–∏–∏
    :return: None
    """
    try:
        if message.text.strip().lower() == '/cancel':
            bot.send_message(message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return

        user_id = message.from_user.id
        user_name = f'{message.from_user.first_name or ""} {message.from_user.last_name or ""}'
        auth_code = message.text.strip()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –ë–î
        staff_list = select_all('staff')
        for post in staff_list:
            staff_post = post[1]
            code = post[4]
            if auth_code == code:
                update_values('staff',
                              {'telegram_id': user_id, 'name': user_name},
                              {'auth_code': auth_code}
                              )
                bot.send_message(message.chat.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ {staff_post}')
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ—å {message.chat.id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {staff_post}')
                bot.send_message(find_staff_id('–ê–¥–º–∏–Ω'),
                                 f"‚ö†Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: {message.from_user.first_name} {message.from_user.last_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {staff_post}")
                return
            else:
                continue
        else:
            msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
            bot.register_next_step_handler(msg, enter_auth_code)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ enter_auth_code: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


@bot.message_handler(commands=['send'])
def send_data(message):
    """
    –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –∫–æ–º–∞–Ω–¥–∞ /send
    :return: None
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        today = datetime.now().day
        if not (start_collection[0] <= today < end_collection[0]):
            bot.send_message(message.chat.id,
                             "‚ùå –ü—Ä–∏–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏–π –∑–∞–∫—Ä—ã—Ç. –ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å 23 –ø–æ 27 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
        telegram_id = message.from_user.id
        user = find_user_by_id('meters_data', telegram_id)
        if user:
            bot.send_message(message.chat.id, '‚úÖ –í—ã —É–∂–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ')
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if telegram_id in temp_users:
            user = temp_users[telegram_id]
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            user_data = find_user_by_id('users', telegram_id, 'apartment, water_count, electricity_count')
            if not user_data:
                bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
                return

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            apartment, water_count, electricity_count = user_data
            user = User(telegram_id, apartment, water_count, electricity_count)
            temp_users[telegram_id] = user

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–≤–±–æ—Ä–∞ —Å—á–µ—Ç—á–∏–∫–∞
        month, year = get_month()
        markup = create_meters_markup(user)
        bot.send_message(message.chat.id, f"üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è –∑–∞ {month} {year}", reply_markup=markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_data: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


@bot.callback_query_handler(func=lambda call: call.data.startswith('meter_'))
def meter_input(call):
    """
    –í–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
    :param call: –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
    :return: None
    """
    try:
        # –í–≤–æ–¥ –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
        meter = call.data.split('_')[1]
        current_editing[call.from_user.id] = meter
        msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞:")
        bot.register_next_step_handler(msg, process_value)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ meter_input: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        handle_error(e)


def process_value(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    :return: None
    """
    try:
        telegram_id = message.from_user.id
        user = temp_users.get(telegram_id)
        meter = current_editing.get(telegram_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–∫–∏
        if not user or not meter:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Å—á—ë—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
        try:
            value = int(message.text.strip())
            if value < 0:
                raise ValueError
        except:
            msg = bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
            bot.register_next_step_handler(msg, process_value)
            return

        # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        user.add_metric(meter, value)
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        month, year = get_month()
        markup = create_meters_markup(user)
        bot.send_message(message.chat.id, f"üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è –∑–∞ {month} {year}", reply_markup=markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_value: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


@bot.callback_query_handler(func=lambda call: call.data == 'review')
def review(call):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    :param call: –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    :return: None
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = temp_users.get(call.from_user.id)
        if not user:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        markup = create_review_markup(user)
        month, year = get_month()
        bot.send_message(call.message.chat.id, f"üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ {month} {year}", reply_markup=markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ review: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        handle_error(e)

@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_'))
def edit_value(call):
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
    :param call: –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    :return: None
    """
    try:
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        meter = call.data.split('_')[1]
        current_editing[call.from_user.id] = meter
        msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞")
        bot.register_next_step_handler(msg, process_value)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_value: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        handle_error(e)

@bot.callback_query_handler(func=lambda call: call.data == 'confirm_all')
def confirm_all(call):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π. –ó–∞–ø–∏—Å—å –≤ –ë–î
    :param call: –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    :return: None
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = temp_users.get(call.from_user.id)
        if not user:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = user.get_report()

        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
        cold_list = cold_water_meters[user.water_count]
        hot_list = hot_water_meters[user.water_count]
        elec_list = electricity_meters[user.electricity_type]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è –∏–∑ current_meters
        data = current_meters.get(user.telegram_id, {})
        # –•–í–°
        cw1 = int(data.get(cold_list[0], 0)) if len(cold_list) > 0 else 0
        cw2 = int(data.get(cold_list[1], 0)) if len(cold_list) > 1 else 0
        cw3 = int(data.get(cold_list[2], 0)) if len(cold_list) > 2 else 0

        # –ì–í–°
        hw1 = int(data.get(hot_list[0], 0)) if len(hot_list) > 0 else 0
        hw2 = int(data.get(hot_list[1], 0)) if len(hot_list) > 1 else 0
        hw3 = int(data.get(hot_list[2], 0)) if len(hot_list) > 2 else 0

        # –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ
        el1 = int(data.get(elec_list[0], 0)) if len(elec_list) > 0 else 0
        el2 = int(data.get(elec_list[1], 0)) if len(elec_list) > 1 else 0

        month = now.strftime('%m.%Y')

        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        columns = [
            'telegram_id', 'apartment', 'month',
            'type_water_meter', 'type_electricity_meter',
            'cold_water_1', 'cold_water_2', 'cold_water_3',
            'hot_water_1', 'hot_water_2', 'hot_water_3',
            'electricity_1', 'electricity_2'
        ]
        values = [
            user.telegram_id,
            user.apartment,
            month,
            user.water_count,
            user.electricity_type,
            cw1, cw2, cw3,
            hw1, hw2, hw3,
            el1, el2
        ]
        insert_to_database('meters_data', columns, values)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
        ACCOUNTANT_ID = find_staff_id('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä')
        bot.send_message(ACCOUNTANT_ID, f"üì® –ü–æ–∫–∞–∑–∞–Ω–∏—è –æ—Ç –∫–≤. {user.apartment}:\n{report}")
        user.clear_metrics()
        temp_users.pop(call.from_user.id, None)
        bot.send_message(call.message.chat.id, "‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        logger.info(f'–ü–æ–∫–∞–∑–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω—ã. –ö–≤–∞—Ä—Ç–∏—Ä–∞ {user.apartment}')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_all: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        handle_error(e)

@bot.callback_query_handler(func=lambda call: call.data == 'back_edit')
def back_edit(call):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    :param call: –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    :return: None
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = temp_users.get(call.from_user.id)
        if not user:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = create_meters_markup(user)
        month, year = get_month()
        bot.send_message(call.message.chat.id, f"üìä –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞ {month} {year}", reply_markup=markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_edit: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        handle_error(e)

@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def cancel(call):
    """
    –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
    :param call: –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
    :return: None
    """
    try:
        # –û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞
        user = temp_users.get(call.from_user.id)
        if user:
            user.clear_metrics()
            temp_users.pop(call.from_user.id, None)

        bot.send_message(call.message.chat.id, "üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        handle_error(e)


@bot.message_handler(commands=['manager', 'accountant', 'electric', 'plumber'])
def handle_address_request(message):
    """
    –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è / –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å—â–æ–≤–∞—Ç–µ–ª—è - –∫–æ–º–∞–Ω–¥–∞, —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é –æ–±—Ä–∞—â–µ–Ω–∏—è
    :return: None
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if find_user_by_id('users', message.from_user.id) is None:
            bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤–≤–µ–¥–∏—Ç–µ /start")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        command = message.text.split('@')[0]
        MANAGER_ID = find_staff_id('–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å')
        ACCOUNTANT_ID = find_staff_id('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä')
        PLUMBER_ID = find_staff_id('–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫')
        ELECTRIC_ID = find_staff_id('–≠–ª–µ–∫—Ç—Ä–∏–∫')
        recipient_data = {
            '/manager': {
                'id': MANAGER_ID,
                'request_text': "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é –¢–°–ñ",
                'recipient': "–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å",
                'message_type': '–û–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é',
                'response_success': "‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é",
                'answer_text': '–û—Ç–≤–µ—Ç –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –¢–°–ñ –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ'
            },
            '/accountant': {
                'id': ACCOUNTANT_ID,
                'request_text': "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É",
                'recipient': "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä",
                'message_type': '–û–±—Ä–∞—â–µ–Ω–∏–µ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É',
                'response_success': "‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É",
                'answer_text': '–û—Ç–≤–µ—Ç –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞ –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ'
            },
            '/electric': {
                'id': ELECTRIC_ID,
                'request_text': "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É —ç–ª–µ–∫—Ç—Ä–∏–∫–∞",
                'recipient': "–≠–ª–µ–∫—Ç—Ä–∏–∫",
                'message_type': '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–ª–µ–∫—Ç—Ä–∏–∫–∞',
                'response_success': "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —ç–ª–µ–∫—Ç—Ä–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                'answer_text': '–û—Ç–≤–µ—Ç —ç–ª–µ–∫—Ç—Ä–∏–∫–∞ –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ'
            },
            '/plumber': {
                'id': PLUMBER_ID,
                'request_text': "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞",
                'recipient': "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫",
                'message_type': '–ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞',
                'response_success': "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                'answer_text': '–û—Ç–≤–µ—Ç —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ'
            }
        }

        msg = bot.send_message(message.chat.id, recipient_data[command]['request_text'])
        bot.register_next_step_handler(msg, lambda m: send_address(m, recipient_data[command]))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_address_request: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)

def send_address(message, recipient_info):
    """
    –ó–∞–ø–∏—Å—å –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ë–î, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è
    :param recipient_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
    :return: None
    """
    try:
        global appeals_count
        text = message.text.strip() if message.text else ""
        sender_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        data = find_user_by_id('users', sender_id, 'name, apartment')
        if not data:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        user_name, apartment = data

        # –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ë–î –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
        try:
            conn = sqlite3.connect(db)
            cur = conn.cursor()
            cur.execute(
                "INSERT INTO appeals (sender_id, apartment, name, message_text, recipient_post) VALUES (?, ?, ?, ?, ?)",
                (sender_id, apartment, user_name, text, recipient_info['recipient'])
            )
            appeal_id = cur.lastrowid
            conn.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π
            appeals_count += 1
            with open('count.txt', 'w') as file:
                file.write(str(appeals_count))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")
            return
        finally:
            if 'cur' in locals():
                cur.close()
            if 'conn' in locals():
                conn.close()

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            "–û—Ç–≤–µ—Ç–∏—Ç—å",
            callback_data=f"reply_{sender_id}_{message.message_id}_{appeal_id}"
        ))

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            recipient_info['id'],
            f'üì® –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –∂–∏—Ç–µ–ª—è:\n'
            f'üë§ [{user_name}](tg://user?id={sender_id})\n'
            f'üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment}\n\n'
            f'_{text}_',
            parse_mode="Markdown",
            reply_markup=markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞
        active_dialogs[recipient_info['id']] = {
            'user_id': sender_id,
            'message_id': message.message_id,
            'appeal_id': appeal_id
        }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–ø–∏–∏ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å)
        if recipient_info['id'] != find_staff_id('–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å'):
            bot.send_message(
                find_staff_id('–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å'),
                f'üì® –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –∂–∏—Ç–µ–ª—è:\n'
                f'‚Äçüíª –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_info["recipient"]}\n'
                f'üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: [{user_name}](tg://user?id={sender_id})\n'
                f'üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment}\n\n'
                f'_{text}_',
                parse_mode="Markdown",
            )

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id}. –ü–æ–ª—É—á–∞—Ç–µ–ª—å {recipient_info['recipient']}")
        bot.send_message(message.chat.id, recipient_info['response_success'])

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_adress: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)

@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def start_staff_reply(call):
    """
    –ó–∞–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    :param call: –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    :return: None
    """
    try:
        parts = call.data.split('_')
        if len(parts) < 4:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
            return

        user_id = int(parts[1])
        message_id = int(parts[2])
        appeal_id = int(parts[3])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞
        active_dialogs[call.from_user.id] = {
            'user_id': user_id,
            'message_id': message_id,
            'appeal_id': appeal_id
        }

        bot.send_message(
            call.from_user.id,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
            reply_markup=types.ForceReply(selective=True)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_staff_reply: {e}", exc_info=True)
        try:
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        handle_error(e)

@bot.message_handler(func=lambda m: m.reply_to_message and m.reply_to_message.text == "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
def process_staff_reply(message):
    """
    –ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    :return: None
    """
    try:
        staff_id = message.from_user.id
        if staff_id not in active_dialogs:
            return

        dialog_data = active_dialogs[staff_id]
        user_id = dialog_data['user_id']
        appeal_id = dialog_data['appeal_id']

        MANAGER_ID = find_staff_id('–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å')
        ACCOUNTANT_ID = find_staff_id('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä')
        ELECTRIC_ID = find_staff_id('–≠–ª–µ–∫—Ç—Ä–∏–∫')
        PLUMBER_ID = find_staff_id('–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ª–∂–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ
        if staff_id == MANAGER_ID:
            staff_position = "–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –¢–°–ñ"
        elif staff_id == ACCOUNTANT_ID:
            staff_position = "–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∞"
        elif staff_id == ELECTRIC_ID:
            staff_position = "—ç–ª–µ–∫—Ç—Ä–∏–∫–∞"
        elif staff_id == PLUMBER_ID:
            staff_position = "—Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞"
        else:
            staff_position = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        bot.send_message(user_id, f"üì© –û—Ç–≤–µ—Ç {staff_position} –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n\n{message.text}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ë–î
        try:
            conn = sqlite3.connect(db)
            cur = conn.cursor()
            cur.execute(
                "UPDATE appeals SET answer_text = ?, status = 'closed' WHERE id = ?",
                (message.text, appeal_id)
            )
            conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
            bot.send_message(staff_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞")
            return
        finally:
            if 'cur' in locals():
                cur.close()
            if 'conn' in locals():
                conn.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–µ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å)
        if staff_id != find_staff_id('–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å'):
            user_data = find_user_by_id('users', user_id, 'name, apartment')
            if user_data:
                user_name, apartment = user_data
                bot.send_message(
                    find_staff_id('–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å'),
                    f'üì© –û—Ç–≤–µ—Ç {staff_position}:\n'
                    f'‚Äçüíª –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {user_name}\n'
                    f'üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment}\n\n'
                    f'_{message.text}_',
                    parse_mode="Markdown"
                )

        logger.info(f'–û—Ç–≤–µ—Ç {staff_position} –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ ID {appeal_id}')
        bot.send_message(staff_id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        del active_dialogs[staff_id]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_staff_reply: {e}", exc_info=True)
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)

def notifications():
    """
    –û—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–±–æ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π (–¥–ª—è –≤—Å–µ—Ö)
    2. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π (–¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –µ—â–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª)
    3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–±–æ—Ä–∞ (–¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª)
        3.1. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É
    :return: None
    """
    scheulder = BackgroundScheduler()
    scheulder.add_job(backup_daily, 'cron', hour=2, minute=0)

    while True:
        now = datetime.now()
        current_month = f"{now.month}.{now.year}"

        # –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
        if now.day == start_collection[0] and now.hour == start_collection[1] and now.minute == start_collection[2]:
            users = select_all('users')
            logger.info("–û—Ç–∫—Ä—ã—Ç —Å–±–æ—Ä –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤")
            if not scheulder.running:
                scheulder.start()
            for user in users:
                bot.send_message(user[1], "üì¨ –û—Ç–∫—Ä—ã—Ç —Å–±–æ—Ä –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤")

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ
        if now.day == notification_time[0] and now.hour == notification_time[1] and now.minute == notification_time[2]:
            users = select_all('users')
            sended_data = select_all('meters_data')
            apartments = []
            for data in sended_data:
                apartments.append(data[2])
            for user in users:
                users_apartment = user[2]
                user_id = user[1]
                if users_apartment not in apartments:
                    bot.send_message(user_id, "‚è∞ –ü–æ—Ä–∞ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤! /send")
                    logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞
        if now.day == end_collection[0] and now.hour == end_collection[1] and now.minute == end_collection[2]:

            ACCOUNTANT_ID = find_staff_id('–ë—É—Ö–≥–∞–ª—Ç–µ—Ä')
            send_table(ACCOUNTANT_ID)
            logger.info('–¢–∞–±–ª–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–≤–ª–µ–Ω–∞ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É')
            if scheulder.running:
                scheulder.shutdown()
            clear_table('meters_data')
            backup_monthly()
            logger.warning('–¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π –æ—á–∏—â–µ–Ω–∞')

        time.sleep(60)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
def handle_error(exception):
    try:
        logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {exception}", exc_info=True)
        admin_id = find_staff_id('–ê–¥–º–∏–Ω')
        if admin_id:
            bot.send_message(admin_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n{str(exception)[:500]}")
    except Exception as inner_error:
        # –¢–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
        print(f"CRITICAL: Error in error handler: {inner_error}")


def init_db():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    :return: None
    """
    try:
        create_table('users', [
            "telegram_id INTEGER UNIQUE",
            "name TEXT",
            "apartment INTEGER",
            "water_count INTEGER",
            "electricity_count INTEGER"
        ])
        create_table('meters_data', [
            "telegram_id INTEGER",
            "apartment INTEGER",
            "month VARCHAR",
            "type_water_meter INTEGER",
            "type_electricity_meter INTEGER",
            "cold_water_1 INTEGER",
            "cold_water_2 INTEGER",
            "cold_water_3 INTEGER",
            "hot_water_1 INTEGER",
            "hot_water_2 INTEGER",
            "hot_water_3 INTEGER",
            "electricity_1 INTEGER",
            "electricity_2 INTEGER"
        ])
        create_table('appeals', [
            'sender_id INTEGER',
            'apartment INTEGER',
            'name TEXT',
            'message_text TEXT',
            'recipient_post TEXT',
            'answer_text TEXT',
            "status TEXT DEFAULT 'open'",
        ])
        create_table('staff', [
            'post TEXT',
            'telegram_id INTEGER',
            'name TEXT',
            'auth_code TEXT'
        ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /init db: {e}", exc_info=True)
        try:
            bot.send_message(find_staff_id('–ê–¥–º–∏–Ω'), "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)

def init_staff():
    """
    –ó–∞–ø–æ–ª–µ–Ω–∏–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    :return: None
    """
    try:
        tablename = 'staff'
        table = select_all(tablename)
        if table:
            return
        columns = ['post', 'auth_code']
        insert_to_database(tablename, columns, ['–ê–¥–º–∏–Ω', ADMIN_CODE])
        insert_to_database(tablename, columns, ['–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å', MANAGER_CODE])
        insert_to_database(tablename, columns, ['–ë—É—Ö–≥–∞–ª—Ç–µ—Ä', ACCOUNTANT_CODE])
        insert_to_database(tablename, columns, ['–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫', PLUMBER_CODE])
        insert_to_database(tablename, columns, ['–≠–ª–µ–∫—Ç—Ä–∏–∫', ELECTRIC_CODE])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ init staff: {e}", exc_info=True)
        try:
            bot.send_message(find_staff_id('–ê–¥–º–∏–Ω'), "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass
        handle_error(e)


def backup_daily(db_path="tsg_database.sql", backup_dir="backups/daily"):
    """
    –°–æ–∑–¥–∞—ë—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –°—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø —É–¥–∞–ª—è–µ—Ç—Å—è, —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π.
    """
    os.makedirs(backup_dir, exist_ok=True)
    backup_path = os.path.join(backup_dir, "backup_daily.sql")

    # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø, –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists(backup_path):
        os.remove(backup_path)

    shutil.copy2(db_path, backup_path)
    logger.info(f"[‚úì] –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
    bot.send_message(find_staff_id('–ê–¥–º–∏–Ω'), "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ (–¥–µ–Ω—å)")


def backup_monthly(db_path="tsg_database.sql", backup_dir="backups/monthly"):
    """
    –°–æ–∑–¥–∞—ë—Ç –µ–∂–µ–º–µ—Å—è—á–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –•—Ä–∞–Ω–∏—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è.
    """
    os.makedirs(backup_dir, exist_ok=True)
    month_str = datetime.now().strftime("%Y-%m")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π datetime
    backup_path = os.path.join(backup_dir, f"backup_{month_str}.sql")

    if not os.path.exists(backup_path):
        shutil.copy2(db_path, backup_path)
        logger.info(f"[‚úì] –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
        bot.send_message(find_staff_id('–ê–¥–º–∏–Ω'), "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ (–º–µ—Å—è—Ü)")
    else:
        logger.info(f"[!] –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∫–æ–ø–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {backup_path}")
        bot.send_message(find_staff_id('–ê–¥–º–∏–Ω'), "–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∫–æ–ø–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_db()
    init_staff()
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ –¥–µ–º–æ–Ω-–ø–æ—Ç–æ–∫–µ
    threading.Thread(target=notifications, daemon=True).start()

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    restart_delay = 5  # –Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    max_delay = 300  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (5 –º–∏–Ω—É—Ç)
    consecutive_errors = 0  # —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
    max_consecutive_errors = 10  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥

    while True:
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ polling... (–∑–∞–¥–µ—Ä–∂–∫–∞: {restart_delay}—Å–µ–∫, –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: {consecutive_errors})")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ polling —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            bot.polling(
                none_stop=True,
                timeout=90,  # —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π timeout
                long_polling_timeout=60,  # —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π long_polling timeout
                skip_pending=True,  # –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å pending updates –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
                interval=1,  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                allowed_updates=None  # –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö update types
            )

            # –ï—Å–ª–∏ polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            restart_delay = 5
            consecutive_errors = 0
            logger.info("Polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")

        except ConnectionResetError as e:
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ "–£–¥–∞–ª–µ–Ω–Ω—ã–π —Ö–æ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–æ—Ä–≤–∞–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
            consecutive_errors += 1
            logger.error(f"ConnectionResetError [{consecutive_errors}]: –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ö–æ—Å—Ç —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {e}")

            if consecutive_errors >= max_consecutive_errors:
                logger.critical(
                    f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ ({max_consecutive_errors}). –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–±–æ—Ç—É –Ω–∞ 10 –º–∏–Ω—É—Ç.")
                try:
                    bot.send_message(
                        find_staff_id("–ê–¥–º–∏–Ω"),
                        "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫. "
                        "–ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 10 –º–∏–Ω—É—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
                    )
                except:
                    pass
                time.sleep(600)  # 10 –º–∏–Ω—É—Ç –ø–∞—É–∑—ã
                consecutive_errors = 0
                restart_delay = 5
                continue

            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ + —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è
            restart_delay = min(restart_delay * 2, max_delay)
            jitter = random.uniform(0.8, 1.2)  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
            actual_delay = restart_delay * jitter

            try:
                bot.send_message(
                    find_staff_id("–ê–¥–º–∏–Ω"),
                    f"üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ Telegram —Å–µ—Ä–≤–µ—Ä–æ–º\n"
                    f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {actual_delay:.1f}—Å–µ–∫\n"
                    f"–û—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: {consecutive_errors}/{max_consecutive_errors}"
                )
            except Exception as notify_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {notify_error}")

            logger.info(f"–ñ–¥–µ–º {actual_delay:.1f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...")
            time.sleep(actual_delay)

        except (ConnectionError, ProtocolError, requests.exceptions.ConnectionError,
                socket.gaierror, socket.timeout, http.client.RemoteDisconnected) as e:
            # –î—Ä—É–≥–∏–µ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
            consecutive_errors += 1
            logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ [{consecutive_errors}]: {type(e).__name__}: {e}")

            restart_delay = min(restart_delay * 1.5, max_delay)
            try:
                bot.send_message(
                    find_staff_id("–ê–¥–º–∏–Ω"),
                    f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}\n"
                    f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {restart_delay}—Å–µ–∫\n"
                    f"–û—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: {consecutive_errors}/{max_consecutive_errors}"
                )
            except Exception as notify_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {notify_error}")

            time.sleep(restart_delay)

        except telebot.apihelper.ApiException as e:
            # –û—à–∏–±–∫–∏ API Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤)
            consecutive_errors += 1
            logger.error(f"API Error [{consecutive_errors}]: {e}")

            # –î–ª—è API –æ—à–∏–±–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            restart_delay = min(restart_delay * 3, 900)  # –º–∞–∫—Å–∏–º—É–º 15 –º–∏–Ω—É—Ç –¥–ª—è API errors
            try:
                bot.send_message(
                    find_staff_id("–ê–¥–º–∏–Ω"),
                    f"üì° –û—à–∏–±–∫–∞ Telegram API: {str(e)[:100]}\n"
                    f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {restart_delay}—Å–µ–∫\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"
                )
            except Exception as notify_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {notify_error}")

            time.sleep(restart_delay)

        except KeyboardInterrupt:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã—Ö–æ–¥ –ø–æ Ctrl+C
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            try:
                bot.send_message(find_staff_id("–ê–¥–º–∏–Ω"), "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
            except:
                pass
            break

        except Exception as e:
            # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            consecutive_errors += 1
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ [{consecutive_errors}]: {type(e).__name__}: {e}", exc_info=True)

            restart_delay = min(restart_delay * 2, max_delay)
            try:
                bot.send_message(
                    find_staff_id("–ê–¥–º–∏–Ω"),
                    f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}\n"
                    f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {restart_delay}—Å–µ–∫\n"
                    f"–û—à–∏–±–∫–∞: {str(e)[:150]}"
                )
            except Exception as notify_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {notify_error}")

            time.sleep(restart_delay)

        finally:
            # –í—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
            logger.info("–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º...")
            try:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
                if 'session' in globals():
                    telebot.session.close()
            except Exception as cleanup_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {cleanup_error}")

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∑–∞–¥–µ—Ä–∂–∫–∞={restart_delay}—Å–µ–∫, –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥={consecutive_errors}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º
            try:
                socket.create_connection(("8.8.8.8", 53), timeout=5)
                logger.info("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
            except socket.error:
                logger.warning("–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                try:
                    bot.send_message(
                        find_staff_id("–ê–¥–º–∏–Ω"),
                        "üåê –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!\n"
                        "–ë–æ—Ç –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è..."
                    )
                except:
                    pass