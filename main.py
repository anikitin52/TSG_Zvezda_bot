from telebot import TeleBot, types
from datetime import datetime
import threading
import time

from config import *
from data.models import User
from services.utils import *
from data.data import *
from services.exel_export import send_table
from data.database import *


bot = TeleBot(BOT_TOKEN)
now = datetime.now()

@bot.message_handler(commands=['start'])  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def start(message):
    tablename = 'users'
    user_id = message.from_user.id

    create_table(tablename, [
        "telegram_id INTEGER UNIQUE",
        "apartment INTEGER",
        "water_count INTEGER",
        "electricity_count INTEGER"
    ])

    user = find_user_by_id(tablename, user_id, '*')

    if user:
        apartment = user[2]  # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
        bot.send_message(message.chat.id, f"‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment}")

    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data='register'))
        print(f"{now} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        bot.send_message(message.chat.id, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å:", reply_markup=markup)


@bot.message_handler(commands=['export'])
def export_data(message):
    if message.chat.id != ACCOUNTANT_ID:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    else:
        print(f'{now} –ü–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–ª—å {message.chat.id} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª Exel-—Ç–∞–±–ª–∏—Ü—É')
        send_table(message.chat.id)



@bot.callback_query_handler(func=lambda call: call.data == 'register')
def register(call):
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã (1‚Äì150):")
    bot.register_next_step_handler(msg, process_apartment)


def process_apartment(message):
    tablename = 'users'
    try:
        apartment = int(message.text.strip())
        if not 1 <= apartment <= 150:
            raise ValueError
    except:
        msg = bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 150")
        bot.register_next_step_handler(msg, process_apartment)
        return

    users = select_all(tablename)

    user_id = message.from_user.id
    if any(u[2] == apartment for u in users):
        bot.send_message(message.chat.id, "‚ùå –ö–≤–∞—Ä—Ç–∏—Ä–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
        return

    user_data[user_id] = {'apartment': apartment}
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã (–æ—Ç 1 –¥–æ 3):")
    bot.register_next_step_handler(msg, check_water_meters)


def check_water_meters(message):
    try:  # TODO: –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        water_meters = int(message.text.strip())
        if not 1 <= water_meters <= 3:
            raise ValueError
    except:
        msg = bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3")
        bot.register_next_step_handler(msg, check_water_meters)
        return

    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ user_data
    apartment = user_data[user_id]['apartment']

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ user_data
    user_data[user_id] = {
        'water_count': water_meters,
        'apartment': apartment  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã
    }

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton('–û–¥–Ω–æ—Ç–∞—Ä–∏—Ñ–Ω—ã–π', callback_data=f'elec_1_{water_meters}_{apartment}'),
        types.InlineKeyboardButton('–î–≤—É—Ö—Ç–∞—Ä–∏—Ñ–Ω—ã–π', callback_data=f'elec_2_{water_meters}_{apartment}')
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—á–µ—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('elec_'))
def select_meters(call):
    parts = call.data.split('_')
    elec_type = parts[1]  # 1 –∏–ª–∏ 2
    water_count = parts[2]
    user_id = call.from_user.id
    tablename = 'users'

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    apartment = user_data[user_id]['apartment']

    insert_to_database(tablename,
                       ['telegram_id', 'apartment', 'water_count', 'electricity_count'],
                       [user_id, int(apartment), int(water_count), int(elec_type)])

    print('OK')
    del user_data[user_id]
    bot.send_message(call.message.chat.id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å: /account")
    bot.send_message(ADMIN_ID,
                     f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –∫–≤. {apartment}, "
                     f"—Å—á–µ—Ç—á–∏–∫–æ–≤ –≤–æ–¥—ã: {water_count}, "
                     f"—Ç–∏–ø —Å—á–µ—Ç—á–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞: {'–¥–≤—É—Ö—Ç–∞—Ä–∏—Ñ–Ω—ã–π' if elec_type == '2' else '–æ–¥–Ω–æ—Ç–∞—Ä–∏—Ñ–Ω—ã–π'}")
    print(f'{datetime.now()} –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ö–≤–∞—Ä—Ç–∏—Ä–∞ {apartment}')



# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å
@bot.message_handler(commands=['account'])
def account(message):
    telegram_id = message.from_user.id
    user_exists = find_user_by_id('users', telegram_id, 'COUNT(*)')[0] > 0  # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å

    if not user_exists:
        bot.send_message(
            message.chat.id,
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
        )
        return

    result = find_user_by_id('users', telegram_id, 'apartment, water_count, electricity_count')

    if result:
        apartment, water_count, electricity_type = result
        rate = "–û–¥–Ω–æ—Ç–∞—Ä–∏—Ñ–Ω—ã–π" if electricity_type == "one_rate" else "–î–≤—É—Ö—Ç–∞—Ä–∏—Ñ–Ω—ã–π"
        bot.send_message(
            message.chat.id,
            f"üè† –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment}\n"
            f"–°—á—ë—Ç—á–∏–∫–æ–≤ –≤–æ–¥—ã: {water_count}\n"
            f"–°—á–µ—Ç—á–∏–∫ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞: {rate}"
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è"
        )


@bot.message_handler(commands=['send'])
def send_data(message):
    now = datetime.now()
    if now.day < start_collection[0] or now.day > end_collection[0]:
        bot.send_message(message.chat.id,
                         "‚ùå –ü—Ä–∏–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏–π –∑–∞–∫—Ä—ã—Ç. –ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å 23 –ø–æ 27 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞")
        return

    telegram_id = message.from_user.id

    if telegram_id in temp_users:
        user = temp_users[telegram_id]
    else:

        user_data = find_user_by_id('users', telegram_id, 'apartment, water_count, electricity_count')

        if not user_data:
            bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
            return

        apartment, water_count, electricity_count = user_data
        user = User(telegram_id, apartment, water_count, electricity_count)
        temp_users[telegram_id] = user

    month, year = get_month()
    markup = create_meters_markup(user)
    bot.send_message(message.chat.id, f"üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è –∑–∞ {month} {year}", reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data.startswith('meter_'))
def meter_input(call):
    meter = call.data.split('_')[1]
    current_editing[call.from_user.id] = meter
    msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞:")
    bot.register_next_step_handler(msg, process_value)


def process_value(message):
    telegram_id = message.from_user.id
    user = temp_users.get(telegram_id)
    meter = current_editing.get(telegram_id)

    if not user or not meter:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Å—á—ë—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    try:
        value = int(message.text.strip())
        if value < 0:
            raise ValueError
    except:
        msg = bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        bot.register_next_step_handler(msg, process_value)
        return

    user.add_metric(meter, value)

    month, year = get_month()
    markup = create_meters_markup(user)
    bot.send_message(message.chat.id, f"üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è –∑–∞ {month} {year}",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'review')
def review(call):
    user = temp_users.get(call.from_user.id)
    if not user:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    markup = create_review_markup(user)
    month, year = get_month()
    bot.send_message(call.message.chat.id, f"üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ {month} {year}", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_'))
def edit_value(call):
    meter = call.data.split('_')[1]
    current_editing[call.from_user.id] = meter
    msg = bot.send_message(call.message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞")
    bot.register_next_step_handler(msg, process_value)


@bot.callback_query_handler(func=lambda call: call.data == 'confirm_all')
def confirm_all(call):
    user = temp_users.get(call.from_user.id)
    if not user:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    report = user.get_report()

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤
    cold_list = cold_water_meters[user.water_count]
    hot_list = hot_water_meters[user.water_count]
    elec_list = electricity_meters[user.electricity_type]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è –∏–∑ current_meters
    data = current_meters.get(user.telegram_id, {})
    # –•–í–°
    cw1 = int(data.get(cold_list[0], 0)) if len(cold_list) > 0 else 0
    cw2 = int(data.get(cold_list[1], 0)) if len(cold_list) > 1 else 0
    cw3 = int(data.get(cold_list[2], 0)) if len(cold_list) > 2 else 0

    # –ì–í–°
    hw1 = int(data.get(hot_list[0], 0)) if len(hot_list) > 0 else 0
    hw2 = int(data.get(hot_list[1], 0)) if len(hot_list) > 1 else 0
    hw3 = int(data.get(hot_list[2], 0)) if len(hot_list) > 2 else 0

    # –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ
    el1 = int(data.get(elec_list[0], 0)) if len(elec_list) > 0 else 0
    el2 = int(data.get(elec_list[1], 0)) if len(elec_list) > 1 else 0

    now = datetime.now()
    month = now.strftime('%m.%Y')

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    columns = [
        "telegram_id INTEGER",
        "apartment INTEGER",
        "month VARCHAR",
        "type_water_meter INTEGER",
        "type_electricity_meter INTEGER",
        "cold_water_1 INTEGER",
        "cold_water_2 INTEGER",
        "cold_water_3 INTEGER",
        "hot_water_1 INTEGER",
        "hot_water_2 INTEGER",
        "hot_water_3 INTEGER",
        "electricity_1 INTEGER",
        "electricity_2 INTEGER"
    ]
    create_table('meters_data', columns)

    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    columns = [
        'telegram_id', 'apartment', 'month',
        'type_water_meter', 'type_electricity_meter',
        'cold_water_1', 'cold_water_2', 'cold_water_3',
        'hot_water_1', 'hot_water_2', 'hot_water_3',
        'electricity_1', 'electricity_2'
    ]
    values = [
        user.telegram_id,
        user.apartment,
        month,
        user.water_count,
        user.electricity_type,
        cw1, cw2, cw3,
        hw1, hw2, hw3,
        el1, el2
    ]
    insert_to_database('meters_data', columns, values)

    bot.send_message(ACCOUNTANT_ID, f"üì® –ü–æ–∫–∞–∑–∞–Ω–∏—è –æ—Ç –∫–≤. {user.apartment}:\n{report}")
    user.clear_metrics()
    temp_users.pop(call.from_user.id, None)
    bot.send_message(call.message.chat.id, "‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    print(f'{datetime.now()} –ü–æ–∫–∞–∑–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω—ã. –ö–≤–∞—Ä—Ç–∏—Ä–∞ {user.apartment}')


@bot.callback_query_handler(func=lambda call: call.data == 'back_edit')
def back_edit(call):
    user = temp_users.get(call.from_user.id)
    if not user:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    markup = create_meters_markup(user)
    month, year = get_month()
    bot.send_message(call.message.chat.id, f"üìä –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞ {month} {year}", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'cancel')
def cancel(call):
    user = temp_users.get(call.from_user.id)
    if user:
        user.clear_metrics()
        temp_users.pop(call.from_user.id, None)
    bot.send_message(call.message.chat.id, "üö´ –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω")


@bot.message_handler(commands=['manager', 'accountant', 'electric', 'plumber'])
def handle_address_request(message):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    command = message.text.split('@')[0]
    recipient_data = {
        '/manager': {
            'id': MANAGER_ID,
            'request_text': "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é –¢–°–ñ",
            'message_type': '–û–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é',
            'response_success': "‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é"
        },
        '/accountant': {
            'id': ACCOUNTANT_ID,
            'request_text': "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É",
            'message_type': '–û–±—Ä–∞—â–µ–Ω–∏–µ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É',
            'response_success': "‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—É"
        },
        '/electric': {
            'id': ELECTRIC_ID,
            'request_text': "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É —ç–ª–µ–∫—Ç—Ä–∏–∫–∞",
            'message_type': '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–ª–µ–∫—Ç—Ä–∏–∫–∞',
            'response_success': "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —ç–ª–µ–∫—Ç—Ä–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
        },
        '/plumber': {
            'id': PLUMBER_ID,
            'request_text': "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞",
            'message_type': '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞',
            'response_success': "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
        }
    }

    msg = bot.send_message(message.chat.id, recipient_data[command]['request_text'])
    bot.register_next_step_handler(msg, lambda m: send_address(m, recipient_data[command]))


def send_address(message, recipient_info):
    text = message.text.strip()
    sender_id = message.from_user.id
    sender_name = message.from_user.first_name or ""
    sender_surname = message.from_user.last_name or ""

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    result = find_user_by_id("users", sender_id, "apartment")
    apartment = result[0] if result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(
        recipient_info['id'],
        f'üì® {recipient_info["message_type"]}:\n'
        f'üë§ [{sender_name} {sender_surname}](tg://user?id={sender_id})\n'
        f'üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞: {apartment}\n\n'
        f'_{text}_',
        parse_mode="Markdown"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, recipient_info['response_success'])

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    print(f'{datetime.now()} {recipient_info["message_type"]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ö–≤. {apartment}, ID {sender_id}')



# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏–≤–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler()
def auth(message):
    if message.text == ADMIN_CODE:
        global ADMIN_ID
        ADMIN_ID = message.chat.id
        bot.send_message(message.chat.id, "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω")
        print(
            f'{datetime.now()} –ê–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. ID = {message.chat.id}: {message.from_user.first_name} {message.from_user.last_name}')

    if message.text == MANAGER_CODE:
        global MANAGER_ID
        MANAGER_ID = message.chat.id
        manager = message.from_user
        bot.send_message(message.chat.id, "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å")
        bot.send_message(ADMIN_ID,
                         f'‚Äº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {manager.first_name} {manager.last_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–∞–Ω –∫–∞–∫ –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å')
        print(
            f'{datetime.now()} –ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. ID = {message.chat.id}: {message.from_user.first_name} {message.from_user.last_name}')

    if message.text == ACCOUNTANT_CODE:
        global ACCOUNTANT_ID
        ACCOUNTANT_ID = message.chat.id
        accountant = message.from_user
        bot.send_message(message.chat.id, "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä")

        bot.send_message(ADMIN_ID,
                         f'‚Äº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {accountant.first_name} {accountant.last_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–∞–Ω –∫–∞–∫ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä')
        print(
            f'{datetime.now()} –ë—É—Ö–≥–∞–ª—Ç–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. ID = {message.chat.id}: {message.from_user.first_name} {message.from_user.last_name}')

    if message.text == ELECTRIC_CODE:
        global ELECTRIC_ID
        ELECTRIC_ID = message.chat.id
        electric = message.from_user
        bot.send_message(message.chat.id, "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –≠–ª–µ–∫—Ç—Ä–∏–∫")

        bot.send_message(ADMIN_ID,
                         f'‚Äº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {electric.first_name} {electric.last_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–∞–Ω –∫–∞–∫ –≠–ª–µ–∫—Ç—Ä–∏–∫')
        print(
            f'{datetime.now()} –≠–ª–µ–∫—Ç—Ä–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. ID = {message.chat.id}: {message.from_user.first_name} {message.from_user.last_name}')

    if message.text == PLUMBER_CODE:
        global PLUMBER_ID
        PLUMBER_ID = message.chat.id
        plumber = message.from_user
        bot.send_message(message.chat.id, "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫")

        bot.send_message(ADMIN_ID,
                         f'‚Äº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {plumber.first_name} {plumber.last_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–∞–Ω –∫–∞–∫ –≠–ª–µ–∫—Ç—Ä–∏–∫')
        print(
            f'{datetime.now()} –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. ID = {message.chat.id}: {message.from_user.first_name} {message.from_user.last_name}')


def notifications():
    while True:
        now = datetime.now()
        current_month = f"{now.month}.{now.year}"

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            users = select_all("users")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é select_all –∏–∑ database.py
        except Exception as e:
            print('–ë–î –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞')

        # ‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–±–æ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
        if now.day == start_collection[0] and now.hour == 8 and now.minute == 00:
            print(f"{now} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–±–æ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π")
            for user in users:
                telegram_id = user[0]  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ telegram_id - –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                try:
                    bot.send_message(telegram_id, "üì¨ –û—Ç–∫—Ä—ã—Ç —Å–±–æ—Ä –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤")
                    print(f"{now} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {telegram_id}")
                except Exception as e:
                    print(f"{now} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {telegram_id}: {e}")
            time.sleep(60)

        # ‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–±–æ—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
        if now.day == end_collection[0] and now.hour == end_collection[1] and now.minute == end_collection[2]:
            print(f"{now} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–±–æ—Ä–∞")

            send_table(ACCOUNTANT_ID)


            for user in users:
                telegram_id, apartment, water_count, electricity_count = user[0], user[1], user[2], user[3]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞–∑–∞–Ω–∏—è
                result = find_user_by_id("meters_data", telegram_id,
                                         "1")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é find_user_by_id –∏–∑ database.py
                if result:
                    print(f"{now} –£–∂–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª: {telegram_id}")
                    continue

                if telegram_id not in temp_users:
                    temp_users[telegram_id] = User(telegram_id, apartment, water_count, electricity_count)

                try:
                    bot.send_message(telegram_id, "–ü—Ä–∏–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏–π –∑–∞–∫—Ä—ã—Ç /send")
                    print(f"{now} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {telegram_id}")
                except Exception as e:
                    print(f"{now} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {telegram_id}: {e}")

        # ‚è∞ –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if now.day == notification_time[0] and now.hour == notification_time[1] and now.minute == notification_time[2]:
            print(f"{now} –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π")
            for user in users:
                telegram_id, apartment, water_count, electricity_count = user[0], user[1], user[2], user[3]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞–∑–∞–Ω–∏—è
                result = find_user_by_id("meters_data", telegram_id,
                                         "1")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é find_user_by_id –∏–∑ database.py
                if result:
                    print(f"{now} –£–∂–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª: {telegram_id}")
                    continue

                if telegram_id not in temp_users:
                    temp_users[telegram_id] = User(telegram_id, apartment, water_count, electricity_count)

                try:
                    bot.send_message(telegram_id, "üì¢ –í—Ä–µ–º—è –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è! /send")
                    print(f"{now} –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {telegram_id}")
                except Exception as e:
                    print(f"{now} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {telegram_id}: {e}")

            time.sleep(3600)

        time.sleep(60)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':

    now = datetime.now()
    print(f"{now} –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    threading.Thread(target=notifications, daemon=True).start()
    bot.polling(none_stop=True)
